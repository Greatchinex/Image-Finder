{"version":3,"sources":["Components/NavBar.js","Components/ImageResults.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","AppBar_default","title","ImageResults","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOpen","img","setState","open","currentImg","handleClose","state","imageList","_this2","image","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","style","width","Component","Search","changeText","e","val","target","value","defineProperty","name","images","axios","get","concat","apiUrl","apiKey","searchText","amount","then","res","data","hits","catch","err","console","log","changeAmount","index","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","Components_ImageResults","App","_Component","apply","arguments","inherits","createClass","MuiThemeProvider_default","Components_NavBar","Components_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e932494.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from 'material-ui/AppBar';\n\nfunction NavBar() {\n    return (\n        <div>\n            <AppBar title=\"ImageFinder\" />\n        </div>\n    )\n}\n\nexport default NavBar\n","import React, { Component } from 'react';\nimport { GridList, GridTile } from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\n\nclass ImageResults extends Component {\n\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            open: false,\n            currentImg: \"\"\n        }\n    }\n\n    handleOpen = (img) => {\n        this.setState({\n            open: true,\n            currentImg: img\n        })\n    }\n\n    handleClose = () => {\n        this.setState({\n            open: false\n        })\n    }\n    \n\n    render() {\n\n        let imageList;\n        const { image } = this.props\n        if(image) {\n            imageList = (\n                <GridList cols={3}>\n                    {image.map(img => (\n                        <GridTile \n                            title={img.tags}\n                            key={img.id}\n                            subtitle={\n                                <span> By {img.user} </span>\n                            }\n                            actionIcon={\n                                <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\n                                    <ZoomIn color=\"white\" />\n                                </IconButton>\n                            }\n                        >\n                            <img src={img.largeImageURL} alt=\"\" />\n                        </GridTile>\n                    ))}   \n                </GridList>\n            )\n        } else {\n            imageList = null;\n        }\n\n        const actions = [\n            <FlatButton  label=\"close\" primary={true} onClick={this.handleClose} />\n        ]\n\n        return (\n            <div>\n                {imageList}\n                <Dialog\n                    actions={actions} \n                    modal={false}\n                    open={this.state.open}\n                    onRequestClose={this.handleClose}\n                >\n                    <img src={this.state.currentImg} alt=\"\" style={{width: \"100%\"}} />\n                </Dialog>\n            </div>\n        )\n    }\n}\n\nexport default ImageResults\n","import React, { Component } from 'react'\nimport ImageResults from './ImageResults';\nimport TextField from 'material-ui/TextField';\nimport SelectField from 'material-ui/SelectField';\nimport MenuItem from 'material-ui/MenuItem';\nimport axios from 'axios';\n\nclass Search extends Component {\n\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            searchText: \"\",\n            amount: 15,\n            apiUrl: \"https://pixabay.com/api\",\n            apiKey: \"12637991-b03f1b0043ca2c8cb848511b3\",\n            images: []\n        }\n    }\n\n    // OnChange Events\n    changeText = (e) => {\n        const val = e.target.value\n\n        this.setState({\n            [e.target.name]: val\n        }, () => {\n            // Check if input field is empty\n            if(val === \"\") {\n                this.setState({\n                    images: []\n                })\n            } else {\n                axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`) // &safesearch: so that only appropriate images for all ages will be shown\n                .then(\n                    res => this.setState({images: res.data.hits})\n                )\n                .catch(err => console.log(err));\n            }         \n    });\n    }\n\n    changeAmount = (e, index, value) => {\n       this.setState({\n            amount: value\n       })\n    }\n    \n    render() {\n        console.log(this.state.images);\n        return (\n            <div>\n                <TextField \n                    name=\"searchText\" \n                    value={this.state.searchText} \n                    onChange={this.changeText}\n                    floatingLabelText=\"Search Images\"\n                    fullWidth={true}  \n                />\n\n                <SelectField \n                    name=\"amount\"\n                    floatingLabelText=\"Amount\"\n                    value={this.state.amount}\n                    onChange={this.changeAmount}\n                >\n\n                    <MenuItem value={5} primaryText=\"5\" />\n                    <MenuItem value={10} primaryText=\"10\" />\n                    <MenuItem value={15} primaryText=\"15\" />\n                    <MenuItem value={30} primaryText=\"30\" />\n                    <MenuItem value={50} primaryText=\"50\" />\n                </SelectField>\n                <br />\n\n                {/* Conditional Rendering: To only render component if there is an image in the array */}\n                {this.state.images.length > 0 ? <ImageResults image={this.state.images} /> : null }\n            </div>\n        )\n    }\n}\n\nexport default Search\n","import React, { Component } from 'react';\nimport NavBar from './Components/NavBar';\nimport Search from './Components/Search';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport './App.css';\n\nexport class App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div>\n          <NavBar />\n          <Search />\n        </div>\n      </MuiThemeProvider>\n    )\n  }\n}\n\nexport default App\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1>Xup</h1>\n//     </div>\n//   );\n// }\n\n// export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}